openapi: 3.0.0
info:
  title: Common API for Federated Data Sharing
  description: |
    A set of APIs to support different levels of data sharing in a federated network. 
    The API has three parts Metadata, Selection and Tasks. A site must implement the Metadata API, 
    and it can either implement the Selection API or the Tasks API. In the case that the Tasks API
    is implemented, the Selection API must be implemented as input to compute tasks. 

    This schema describes the Metadata API. The Selection API and Tasks API are houlsed in their
    own repositories in separate files.
  version: 1.1.0
  contact:
    name: 'International COVID-19 Research Data Alliance '
externalDocs:
  description: Common API for Federated Data Sharing Github repository
  url: 'https://github.com/federated-data-sharing/common-api'
tags:
  - name: Metadata API
  - name: Health Check
paths:
  /datasets:
    get:
      summary: Get a list of available datasets.
      description: Shows the list of all datasets available for querying.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dataset_summary'
        '401':
          description: Unauthorized (401)
      tags:
        - Metadata API
      operationId: list-datasets
  '/datasets/{datasetid}':
    get:
      summary: Get Catalogue entry (metadata) and Dictionaries (field descriptions) for dataset.
      description: Returns the catalogue metadata and a list of field descriptions for a specified dataset (by dataset ID).
      parameters:
        - name: datasetid
          in: path
          description: Dataset ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: hospital_a_patient_results
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataset_information'
        '401':
          description: Unauthorized (401)
      tags:
        - Metadata API
      operationId: get-dataset
  '/datasets/{datasetid}/catalogue':
    get:
      summary: Get Catalogue entry (metadata) for dataset.
      description: Returns the catalogue metadata for a specified dataset (by dataset ID).
      parameters:
        - name: datasetid
          in: path
          description: Dataset ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: hospital_a_patient_results
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DCAT_metadata'
        '401':
          description: Unauthorized (401)
        '404':
          description: Not Found (404) - Dataset not found.
      tags:
        - Metadata API
      operationId: get-catalogue
  '/datasets/{datasetid}/dictionaries':
    get:
      summary: Get Dictionaries (field descriptions) for dataset.
      description: Returns a list of field descriptions for each table within a specified dataset (by dataset ID).
      parameters:
        - name: datasetid
          in: path
          description: Dataset ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: hospital_a_patient_results
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_dictionary_list'
        '401':
          description: Unauthorized (401)
        '404':
          description: Not Found (404) - Dataset not found.
      tags:
        - Metadata API
      operationId: get-dictionaries
  '/datasets/{datasetid}/dictionaries/{tableid}':
    get:
      summary: Get a single dataset Dictionary for a specified table.
      description: Returns a set field descriptions for the specified table (by table ID) within a specified dataset (by dataset ID).
      parameters:
        - name: datasetid
          in: path
          description: Dataset ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: hospital_a_patient_results
        - name: tableid
          in: path
          description: Table ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: table_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_dictionary'
        '401':
          description: Unauthorized (401)
        '404':
          description: Not Found (404) - Dataset not found.
      tags:
        - Metadata API
      operationId: get-table
  /healthz:
    get:
      summary: Get a health check of the service.
      responses:
        '200':
          description: OK
      tags:
        - Health Check
      operationId: get-health-status
      description: Liveness Probe
components:
  schemas:
    dataset_summary:
      description: 'A summary of a dataset, including the dataset ID, the dataset name, and the author of the dataset.'
      required:
        - id
      type: object
      properties:
        id:
          type: string
        dataset_name:
          type: string
        author:
          type: string
      example:
        id: hospital_a_patient_results
        dataset_name: Hospital A Patient Results
        author: John Smith
    dataset_information:
      description: A combined object of metadata from the catalogue entry and the dictionary field descriptions.
      required:
        - catalogue
        - dictionaries
      type: object
      properties:
        catalogue:
          $ref: '#/components/schemas/DCAT_metadata'
        dictionaries:
          type: array
          items:
            $ref: '#/components/schemas/data_dictionary'
    DCAT_metadata:
      description: A catalogue of the dataset metadata defined to the DCAT specifications.
      required:
        - id
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        creator:
          type: string
        contactPoint:
          type: string
        publisher:
          $ref: '#/components/schemas/DCAT_metadata_publisher'
        license:
          type: string
        versionInfo:
          type: string
        additionalProperties:
          type: object
      example:
        id: medical_trial_b_results
        title: Medical Trail B Results
        description: A description of the example medical trial and the data contained in this example.
        creator: Jane Jones
        contactPoint: jane.jones@example.com
        publisher:
          name: Example Medical Trial Org
          url: www.examplemedicaltrial.org
        license: 'https://creativecommons.org/licenses/by/3.0/'
        versionInfo: '1.0'
        additionalProperties:
          additional_tags:
            - tag1
            - tag2
            - tag3
          extra_info: Some additional information.
    DCAT_metadata_publisher:
      description: An object containing the publisher name and url for the DCAT catalogue.
      required:
        - name
        - url
      type: object
      properties:
        name:
          type: string
        url:
          type: string
      example:
        name: Example Medical Trial Org
        url: www.examplemedicaltrial.org
    data_dictionary_list:
      description: A list of dataset dictionaries for a particular dataset.
      type: object
      properties:
        dictionaries:
          type: array
          items:
            $ref: '#/components/schemas/data_dictionary'
      example:
        dictionaries:
          - id: table_1
            fields:
              - name: sex
                label: Sex
                type: text
                description: 'Sex of patient, factor with levels (F or M)'
                constraints: SEX
              - name: age_brc
                label: Age
                type: text
                description: 'Age group, of the forms 18-25 (B1), 25-50 (B2), 50+ (B3).'
                constraints: AGE
            lookups:
              AGE:
                - name: B1
                  description: Bracket 1 - 18-25
                - name: B2
                  description: Bracket 2 - 25-50
                - name: B3
                  description: Bracket 3 - 50+
              SEX:
                - name: F
                  description: female
                - name: M
                  description: male
          - id: table_2
            fields:
              - name: sex
                label: Sex
                type: text
                description: 'Sex of patient, factor with levels (F or M)'
                constraints: SEX
              - name: age_brc
                label: Age
                type: text
                description: 'Age group, of the forms 18-25 (B1), 25-50 (B2), 50+ (B3).'
                constraints: AGE
            lookups:
              AGE:
                - name: B1
                  description: Bracket 1 - 18-25
                - name: B2
                  description: Bracket 2 - 25-50
                - name: B3
                  description: Bracket 3 - 50+
              SEX:
                - name: F
                  description: female
                - name: M
                  description: male
    data_dictionary:
      description: An object containing the list of fields and lookups for a particular dataset table.
      required:
        - id
      type: object
      properties:
        id:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/data_dictionary_field'
        lookups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/data_dictionary_lookup'
      example:
        id: table_1
        fields:
          - name: sex
            label: Sex
            type: text
            description: 'Sex of patient, factor with levels (F or M)'
            constraints: SEX
          - name: age_brc
            label: Age
            type: text
            description: 'Age group, of the forms 18-25 (B1), 25-50 (B2), 50+ (B3).'
        lookups:
          AGE:
            - name: B1
              description: Bracket 1 - 18-25
            - name: B2
              description: Bracket 2 - 25-50
            - name: B3
              description: Bracket 3 - 50+
          SEX:
            - name: F
              description: female
            - name: M
              description: male
    data_dictionary_field:
      description: A description of a field entry in the dataset table.
      required:
        - name
        - label
        - type
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        type:
          type: string
        description:
          type: string
        constraints:
          type: string
      example:
        name: sex
        label: Sex
        type: text
        description: 'Sex of patient, factor with levels (F or M)'
        constraints: SEX
    data_dictionary_lookup:
      description: A list of lookups for field entries in the dataset dictionary. The items can be arbitrarily named but follow a defined structure.
      type: array
      items:
        $ref: '#/components/schemas/data_dictionary_lookup_inner'
    data_dictionary_lookup_inner:
      description: A lookup reference for field entries in the dataset dictionary.
      required:
        - name
        - description
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        name: F
        description: female
  securitySchemes:
    oAuth2Implicit:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://example.org/api/authorize'
          scopes:
            'api://example_id/read_api': allows reading resources
      x-tokenInfoFunc: common_api_server.controllers.authorization_controller.check_oAuth2Implicit
      x-scopeValidateFunc: common_api_server.controllers.authorization_controller.validate_scope_oAuth2Implicit
servers:
  - url: 'http://localhost:8080/api/v1'
    description: ''
